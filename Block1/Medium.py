"""
Написать функцию, которая на вход будет принимать произвольное количество аргументов и возвращать их сумму.
"""

def sum_args(*args):
    return sum(args)


"""
В сигнатуре функции объявить 4 обязательных аргумента, но оставить возможность передавать в неё
сколько угодно дополнительных аргументов. Попробуйте вызвать функцию в следующих ситуациях и объясните результат:
"""

def sum_args_1(x1, x2, x3, x4, *args):
    return x1 + x2 + x3 + x4 + sum(args)
"""
прокинуть в функцию только 1 аргумент
"""

# print(sum_args_1(1))
# TypeError: sum_args_1() missing 3 required positional arguments: 'x2', 'x3', and 'x4'
# Ошибка. В функцию sum_args_1 ожидалась передача 4 позиционных агрументов ('x2', 'x3', and 'x4' не переданы)


"""
прокинуть аргументы таким образом, чтобы обязательный аргумент был передан одновременно позиционно и по ключу
"""

# print(sum_args_1(1, 2, 3, 4, x4=10))
#TypeError: sum_args_1() got multiple values for argument 'x4'
# sum_args_1() получил несколько значений для аргумента «x4» (позиционный и по ключу)


"""
создать кортеж со значениями и распаковать его при вызове функции с помощью *
"""

# tuple_args = (1, 2, 3, 4, 10, 20)
# print(sum_args_1(*tuple_args))

"""
создать словарь со значениями и распаковать его при вызове функции с помощью * и **: что наблюдаете? Почему?
"""

# dict_args = {'x1': 1, 'x2': 2, 'x3': 3, 'x4': 4}
# print(sum_args_1(*dict_args))
# в функцию передает ключи, а не значения. Падает с ошибкой

# print(sum_args_1(**dict_args))
# работает. через ** распаковываются именованные аргументы, передаваемые в функцию
